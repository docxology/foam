all right welcome to active infant stream number 3.1 on systems it's August 31st 2024 as usual I'll begin it with fetching the origin committing many many updates pushing them and while that's writing here what's going to happen we're going to be talking about systems within systems and also whatever else we end up exploring touching upon some developments in the code base related to William Blake Foya Freedom of Information Act cognitive sovereignty and the pmdp social learning we'll start it off by making an initial GitHub push I'll copy everything down below so we can delete from here GitHub push looks done let's reload the repo double check it's there and we see pushes now so we're triple checked live all right made the GitHub push in this opening the purpose of this stream or at least one of them is to explore various views on implementations of and interactions with systems let's start by going through several code-based developments that I've prepared to show please at any time feel free to write in the live chat a question or a comment or idea so I'll go through these three and then another fourth section at that point conclude along the way or at the end just write in the live chat if anything is like off with what you're seeing or if you have questions or ideas okay we are in folder zero context system systems and we'll start in the William Blake folder we're going to look at through some code methods William Blake's mentions of systems talk about some relevances for modern systems design and look at the applications in the codebase okay so within the William Blake folder there are several scripts and there are several folders William Blake resources contains files like additional references just bibliography hundreds of relevant citations Blake's works by year and table of contents to Erman then there's the edman edited complete works of Blake and letters which is 29,000 lines and the PS which is 88,200 lines as a reminder in cursor all of the code Bas indexed whatever the type is so there's nothing to resync here let's double check though and I'm using cursor 4.3 so 40.3 okay so lot of ways to jump in the poems are great and this is also just the plain text this is not the illuminated printing I'll start with the Blake mentions dopy right click open in the integrated terminal Python 3 Blake mentions py what this is going to do is look at the Target terms in the top of the document system that's our Focus but also just to show that it's a little more General arason and Los logging is done and for each of the terms in the Target terms where the term is mentioned ignoring case three lines before and three lines after get joined into a snippet and that gets saved into an output file so here's across that document of Erman which there can be typos there can be all other sorts of little textual artifacts not everything's included not all the works remained Etc ET Etc but we can explore okay these are the mentions of system in Blake there's nine of them from this poll till a system was formed Etc I must create a system or be enslaved by another man striving with systems to deliver individuals from those systems fixing their systems permanent by mathematic power to govern the evil by good and States abolish systems and here Begins the system of moral virtue named Rahab no Grand work can have them they produce system and monotony before I begin engraving them as it will enable me also to regulate a system of working that will be uniform from beginning to end so that's kind of a cool way to jump in and noting that there's many more mentions of these characters Oris in and Los but same principle applies these are just much longer documents with Snippets often it's like reading through Blake there's all these entities all these things are being mentioned and so these two entity extraction methods use a simpler method which is just basically looking for capitalized this is a Rex that finds basically capitalized words single or pairs whether at a line start or not that start with capitalization and then it goes through and counts it the entity extraction with Spacey uses this package for for slightly more advanced entity recognition but in any case what these end up doing is they output into the analysis section these plots are um just example plots but we can see for example here's a top 10 entities here's entity frequency histogram and so this counts the number of entities of of each time that the entities are mentioned so it kind of just sweeps through finds the capitalized um and the analysis is just doing some basic summary statistics on that so that's just kind of a fun way to jump in and explore how many entities are done and just striving with systems okay that's part one on William Blake let's go to social sciences and active inference okay so this initially comes from Andrew pasa's awesome work at the IC 2s2 conference where he made a Workshop active agents and active inference approach to agent-based modeling in the social sciences he made it in a Google cab notebook which is awesome very accessible and allows people to get active inference multi-agent Network learning simulations working in their browser that's awesome notebooks are again great for just one click running in a browser however they can get pretty unwieldy because you have these linear documents that can sprawl on and on and on and it's hard to know what has been run and not and so on and so uh 27 days ago I made a contribution just to take his collab notebook and copy it into a single. py so that just took his great as far as I understand manually written code about 1,500 lines of code and just brought it into a single python script so it could be run as a script and then what I did over the previous uh day or two having some fun conversations with Andrew in Discord is broke it up across a bunch of different scripts so there's a main.py this is also it's more than just broken up there's also many other changes and developments sometimes to the point where it was like just going through hands and minds and AIS and it's like wait what is even happening but this was just a again experimental play main calls all the aspects of the simulation and then the utilities are broken up across math data analysis agents creating them in the matrices and their networks active inference such as the active inference Loop itself and then the the visualizations this is pretty cool again it's a really helpful imdp styled way to work with what Andrew made which is this awesome multi-agent communication Network simulation there's agents in subn networks and the output of this in the current output folder there's a couple methods that just visualize the matrices of the different agents so a matric that's a for ambiguity that Maps between observations and hidden States so here there's three observations and then there's three hidden States if it were perfect sensory recognition you'd see only ones on the diagonals and zero elsewhere that's when the partially observable Markov process can be treated as a fully observable Markov process B is where action comes into play that's where it becomes a Markov decision process with a policy decision around which slice of B to pick C is a vector that describes preference that comes into play with the pragmatic value in the expected free energy calculations and D is an initial prior on hidden State e is the Habit Vector which describes the prior probabilities on action selection F this is just showing the F at the very beginning I think it just given a tiny value for the variational free energy just to make sure it's all initialized and G not not sure what's even happening here that's for expected free energy for planning and not that this was was tuned or even really checked super deeply for concurrence with the initial simulation but these are uh Fitness of the solutions of the agents across two different graph topologies here's a heat map looking at the correlations of some summary statistics of these simulations there's average fitness Max Fitness and Min of the agents and then Fitness improvements the variables have of course to correlation with himself but there's some interesting patterns here there is some sweeping across error rate and C Improvement preference learning a after every X time steps distribution of Fitness Improvement by network type again kind of interesting possibly the case that the small world Network leads to better Fitness improvements Fitness average fitness over trials by network type here we see the random and the small world and their average fitness changing I think this might reflect Why by the end of the 160 trials they have an equivalent average fitness however the small world improves more most improved topology and let's see Max Fitness versus men Fitness just a few scatter data points um the simulation extensively logged and traced and it's just really cool let's just try so that we can explore a little bit on the interpretability side crl a contrl shift L that's going into the sidebar and we'll ask comprehensively explain this simulation all the components and methods all about how exactly active inference is being being applied here this is the sidebar chat one thing I'm also out of fast request so I really don't know how fast cursor is going to process this control I this floating composer window is an incredible development it enables pretty easy editing across multiple files which can get really far ranging so it's defin like a check and find out what's happening but it can do some amazing things and I think that later in the Stream when we get to more code editing we'll definitely be using the composer a lot okay the script sets up and runs a simulation using active inference principles it involves initializing matrices creating an agent running inference loops and visualizing results the main components include logging agent setup running simulations and processing results we have Imports and logging path setups and constants initialization Fitness data initialization visualization and inference Loop visualization full sweep of the simulation full sweep simulation runs a full sweep simulation across multiple trials results processing final visualization active inference application active inference is applied to the following steps One agent initialization the agent is initialized with matrices that represent its beliefs about the world that's the joint distribution agents are mapped represented compositional cognitive cartography about their beliefs about observations hidden States and policies action selection in the world the agent runs an inference Loop where it updates its beliefs and actions based on observations and internal models three learning and adaptation the agent adapts its internal models as matrices based on a learning parameters and observations and four Sim ation and visualization and now it's also pulling in real links to Plus for example here and a medium tutorial that is all's medium tutorial from 2018 on active inference cool okay let's just go a little bit further here we're using GPT 40 we can ask how does the specific implementation of active inference here in utils uncore active inference differ from other agent based models give comy tensive concise answer also conveying why slow slash where slash when quote free energy calculations are specifically coming into play it was a great question someone brought up in the Institute Discord pretty recently about what H how does active inference differ from embodiment haven't people been thinking about about perception action in terms of their Unity for a long time let's kind of ask a VAR to that question implementation of active inference in the util script differs from other agent-based models primarily in the use of the free energy principle to guide agent Behavior here's a comprehensive yet concise explanation key differences from other agent based models one free energy minimization agents minimize a quantity called free energy which is a measure of the difference between pred predicted in actual sensory inputs this drives both perception updating belief change your mind and action selecting actions to minimize future free energy expected free energy change World other models uh us them other models traditional agent-based models often use predefined rules heris discs or reinforcement learning to guide agent Behavior two regarding belief updating inactive inference agents are continuously updating their beliefs using Basi and inference integrating new sensory data to minimize the variational free energy other models belief updating may not be as Central or they may use different mechanisms like State transitions or ke learning three action selection in active inference actions are selected to minimize expected free energy G which includes both the expected surprise and uncertainty about future States equation 2.6 in the 2022 textbook other models actions are often selected based on maximizing Rewards or following predefined strategies cool nice free energy calculations in active inference where and how act where and how free energy is calculated One agent initialization that's the ABCDE here's action sampling AC agents sample actions based on their current beliefs and the goal of minimizing expected free energy free energy update agent. update free energy agents update their free energy based on the new observation and actions taken and during each time step the script tracks various metrics including average expected free energy a efe list and variational free energy a vfe list why free energy is important oh wow perception and action free energy unifies perception and action under a single framework by minimizing free energy agents improve their models of the world and select actions that reduce uncertainty and prediction error adaptation this approach allows agents to adapt to changing environments dynamically as they continuously update their beliefs and actions to minimize free energy and some code Compares with other models reinforcement learning focuses on maximizing cumulative reward rule-based models use predefined rules evolutionary algorithms use populationbased search methods which Nim and I recently have explored in the in the traveling salesperson problem and the ant colony optimization so pretty cool thanks Andrew for making the original open-source educational materials let's go a little bit deeper into PDP poll okay here we're in systems active inference PDP poll it's a super fun script I hope that PDP Learners respector out there give it a try let's open it in the integrated terminal Python 3 PDP pull here's what this does first it clones into the specific repo of pmdp then it lists all the methods and it rolls through all the methods in the subm modules and it writes it to pmdp methods. markdown so this is this a markdown file that is um let's see 2 200 lines long but how cool these are all the PDP methods listed documentation really matters here's the arguments for pmdp do aent which is in the agent subm module so here we can see the full arguments the aity of the agent and example usage this is not being generated by llm this is just being pulled from the dock strings and the information that's in the PDP package so again those contributions the questions that people ask really do matter here's PDP algorithms run MMP that's marginal message passing for updating marginal posterior beliefs it might be buried somewhere who knows where in a script and here it is brought out for all to see in terms of the parameters that are used and what it returns so it's like hm wow this is really a cool way to study and learn any package but here just in the PDP setting like 1,000 lines later pmdp do control. update posterior policies full factorized here we see okay we have a BC a factor all these arguments what does it do and this is the dock string not llm generated but this is awesome for helping read what the doc strings are not by scanning through and seeing the plain text of the code but rather by being able to look and say like hm okay what were the comments written but with pmdp we could also pretend for a second like we are going to use some llms for development here we'll use command I we'll say update and professionalize these methods without altering function for example with Comprehensive doc strings we missing Andrew in live chat wrote amazing work Daniel thank you for presenting my work and more importantly expanding on the original goal open source learning open source resources totally okay so here we're going to update and then we we'll put in like a a a a special word or just kind of like a weird symbol but if we ran the um PDP poll again it would pull the whole pmdp cleanly so it won't include our updates also cursor doesn't at this time do very well it says above 400 lines uh certainly it gives mixed results once you get like over 500 or a th000 lines it does give mixed results for example sometimes it'll do a fix like up near the top of the document okay we're about to find out it'll do a fix up at the top and then it'll be like okay and then delete the rest so here it's just showing this is like llm augmented development on PBP now this is funny because what it did for the dock strings to the underlying functions was it it peeped into the summary we already had and now it's re-entering the dock string in terms of what it has for parameters and returns so again not saying that's the right way to update but this starts to get into looking really cool like oh maybe there could be like unified formats for what the doc strings are and we could use the active inference ontology in a really coherent way and have the inputs and outputs and the arguments of each of the functions that's important for translation learning and for our accessibilities also for machine sense making so pretty cool I'm going to delete the PDP repo version here and and that's where we got to with PDP pole. py and studying the PDP Library okay into part three cognitive sovereignty okay so cognitive sovereignty and act of inference in the state of exception this was a paper that I wrote in October last year and the paper provides an analysis of Georgio agamben's book homo seer in the tradition of active inference I'll just read this first paragraph homoa articulates the relationship between be life and political existence in Western politics and metaphysics a gambin argues that politics is founded on the inclusive exclusion of be life or natural biological life the physiology and cognition of the body but reading later and more I understood it's not simply only that is politicized only through its exclusion as an exception drawing on Aristotle's definition of as a political animal a gambin traces the historical development of this structure and its continuation in modern biopolitics so in this paper which was super fun to write and I got helpful feedback from colleagues as well first reviewed my reading of homo SRE and some of the logic of sovereignty Drew an illusion between normal politics and the state of exception to normal and revolutionary science in the coonan Paradigm then played off this kind of fully syn thetic concept synthetic intelligence to explore cognitive sovereignty and then consider a situation that we were modeling where active inference agents are having a normal political scenario then there's a crisis which induces a state of exception and then three terms from the active inference ontology but this is kind of a Mad Lib plug-and playay affordances and how that changes during the state of exception variational free energy into terms of bare life and expected free energy in terms of the sovereign's agency during the state of exception and then wrote an active State forence model Sovereign agency in the state of exception and gave some pseudo code so it was a fun paper to write reviewed some of this Humanities and political sciences scholarship and then got to some pseudo code earlier llms o October 2023 and then okay what what what could we do next well we could include a bunch of other topics and then we could also like actually make functions we could we could make the functions that are described and we could go from active State for the sketch above to active govern ants for example multi-agent setting cognitive security Quantum cognitive sovereignty all these kinds of fun topics so following a recipe a meta recipe that we've seen many many times first what I did is I brought in the cognitive sovereignty paper so I just copied in the full paper 280 lines because one line is like a whole paragraph It's about the number of tokens anyway but the new line thing this is kind of a cool feature um then I basically just did control a for all contr K and then I prompted and said okay write a specification for what the model actually is and so it it describes okay well you describe the state space this is kind of like chapter 6 from the 2022 textbooks what is the hierarchical nature if any how do we think about Precision on what variational free energy expected free energy what is the state of exception what is triggering the state of exception how do we build a generative model generative process what algorithm do we need how do we think about the multi-agent setting how do we think about cognitive security and then how do we think optionally about Quantum exceptions and extensions scenario generation validation ethical considerations so this is a technical spec that provides a comprehensive blueprint for implementing an active inference generative model to study cognitive sovereignty and states of exception it incorporates key Concepts from the original paper while providing concrete implementation details and extensions then I kind of asked it to go one more step and said make a technical prospectus for this project and again this is a smaller but pretty similar so that that those resources are there and then just go to the gear and then features re resync I I don't know how often it resyncs by itself but it's just good to know okay we're all C up close Pap close ter okay now let's open up the script so main.py is going to do some pretty cool stuff and these are like meta patterns that are just so useful there's a config.js that has the parameters here it's just the input and output directories and then how many times steps before the crisis are we going to simulate and then how many time steps after the crisis are we going to simulate there's a utilities that contains the different kinds of class and function definitions and then main is going to call in three steps also printing each line of the output in real time main is going to call one two 3 so first it's going to run one generate an entity Library we'll look at the structure of that two it's going to run the simulation according to the config and then three it's going to perform a simulation analysis also based upon the config but I don't think there's any analysis free parameters but it could be so Python 3 in the terminal main.py running one so let's look at the outputs to terminal generating entity library for cognitive sovereignty simulation it say gives an entity library. Json to the output folder we'll look at through these there's 15 entities there's five kinds of entities we got government corporation NOS media and citizen groups and then we have entity 123 for each type it starts out where government one is in power all the others are not in power okay now it's running the simulation the simulation actually runs like super fast but it takes a few seconds to plot one of the figures let's just look at the entity Library while it's running okay so here's how each entity is described um these are well spaced matrices that describe the transitions amongst five different states um the five different states are in power so that's when you start or when you gain power then there's three kind of continuously varying States this is just a five State discrete model high medium and low power so this is kind of like close to being in power medium power and then low power and then there's homo secre which is the category for that which can be killed with impunity explored in the book of the same name so here we go let's look back to the terminal then we'll look over all the other outputs okay ran the simulation visualize this is the step that takes the longest just by visualization methods but it's a big figure um entity traces are recorded then the simulation analysis is wrong so okay let's look at the analysis plain teex summary but it'll get more colorful so we see okay State volatility these are just volatility levels like government one has the lowest variance through time probably because for the first 200 time steps it just stayed in power whereas the other ones were bouncing around during phase one here uh most common States so let's see here's the most common States before and after the crisis like Corporation 1 was most commonly in low power but then afterwards it was most commonly in the Homer state or so on and then this top part State percentages so here's Corporation 2 here's it before it was bouncing between high medium and low power these are just random matricies so it's not super surprising that they're roughly being uh drawn but but here we see like citizen group one was spending more of its time in a low power situation but then after the crisis it was spending you know 18% of the time in the high power 39 in the homo okay here's the traces of the visualization so it's a little bit condensed we could run one for like 10 time steps if you want to see the bouncing around oh but very interestingly this could be a slightly different one actually that line up so that was the government one got displaced in the crisis some new group maybe that's media 2 but it just happens to be a very similar color but it is a different one that comes in here's the results of the simulation many many thousands of lines here we see the the overall occupancy of the different states so we had one out of 15 were in power before and one out of 15 stayed in power after as different one and then here's like the introduction in this kind of um toy situation there was no homre before the crisis but then it opened up like this Niche um State percentages the visualizations are a little bit fun they have their own charm to them but here we see like government one was spending 100% of its time before in power and then after it has but these are overlapping bar charts that could be just visually clarified um but we can see like which one was most like media 2 was spending 100% of the power after okay this is the big figure so each row is an entity and then let's look at these B matrices so here all start out at Baseline and government one is just given the power initially but at Baseline you stay in homre if you're already there but no one starts there so no one is there initially and you stay in power if you're already there again same thing one is just given it so the others that aren't in power are just bouncing around in this submatrix between high medium and low so these are transition matrices just Markov chain processes then once the crisis happens there's two kinds of States there's empowered and disempowered so for all entities once you're empowered like there's no secondary changes in power structure in this simulation once you're Empower you stay there when you're empowered you just stay in power when you're disempowered now you can this is from to two once you're disempowered so that means like you're not the sovereign after the state of exception has begun from to so here if you are if if you happen to just for that first time step be in power then you get kicked to high power with one that's what they all have that one there and then now you're exploring this four submatrix amongst high medium low and Homo Seer so kind of cool um gives a starting point and and um we could possibly fuse that with pmdp because in the paper the definition of sovereignty cognitive sovereignty was for one's own e to influence the vfe of others so when the political operativi of One agent influence the bare life of another that's a state of exception that's political agency so that was the cognitive sovereignty simulation it's like cursor and the llm probably could have gotten there a year ago a little bit less than a year ago so it's like not that this simulation was implausible it's just accelerating more and more with going from even the pseudo Cod I don't know how how much it was needed because it was itself just sort of giving a few sketches so cool okay we'll possibly return and add PDP like meanwhile if anyone in the live chat has a request or a thought um otherwise we'll look at this fourth section and then we'll recap look at all these suggestions it's like did you mean eternal return is that what you meant okay fo you let's let's bring in a kind of realist twist so in other there's all these different Frameworks and uh different kinds of systems hence systems within systems and let's go to Foya all right United States Freedom of Information Act Foya this was generated material is a pivotal federal statute enacted 1966 designed to ensure transparency and accountability in government operations by granting public access to Federal agency records key technical details included it's an actimate and purpose scope request process exemptions appeals and litigation fees electronic Foya there was a 1996 eoa Amendment mandating the electronic availability of certain records in the establishment of electronic reading rooms whoa and annual reports Foya is an essential mechanism for fostering government transparency and accountability enabling the public to remain informed about governmental actions and decisions okay so there's a few different scripts in here there's a main.py this is just a wrapper that's going to call several of these other scripts but let's look through them so foil utils first it loads an API key from the EnV file so as brought up before in the context of llm apis get ignore is at the top level of the repo and here you can specify types of files like file extensions and also whole subfolders like when we clone in other big repos we don't need to then push those as if they were kind of ours that kind of breaks the git chain but we see EnV here so what happens in utils is it's going to load in using the EnV python package the API key fora API key so each person is going to get in their API key and mine is in here I'm not going to show it on the Stream but then when you make your API request it will use your API key and then you can keep your EnV with your secret keys for llms or for the government or whatever it is and you know that it's not going to get pushed to GitHub like when you do a push um utils has different utilities here are some example Foya calls that are just like more form formulaic there's an analysis and a markdown translator and then agency year has a start and an end year so here we did 2000 to 2025 but I also explored doing like 1,200 to 2400 just thousands of years that we wouldn't expect but we never know and then also about a few days ago when I initially did this I got rate limited so I had to have some email correspondences to restore my access but that itself was fun and interesting then I used llm I just would copy this let's just see shift here just selecting this control K just to bring in just that part add any missing agencies okay let's just see if and I just did that several times just to to get a bunch of agencies I I don't even know these may not even be real let's see if any are added here okay more agencies it's like okay now now you've gone too far let's just see really quick USDA aphis this sounds agricultural yeah animal and plant health inspection service that's real kind of like aphid some of these it's like really though see that J mmfl doesn't seem to be an actual one but regardless that's just going to um still get called so again it takes the start and end year and all the Departments listed we could we could um do a hashtag out or we could change the all agencies we could say list of just and then just delete that if we only wanted major apartments or of course you could just delete the ones you don't want and then just say okay only interested in NSF for this year okay um it it sorts it alphabetically converts it to dictionary and then it fetches this utility if if we were you know but this is a common move so so I I might as well just show it select all and then did I but it is it it wasn't really needed because even just pulling up I control I with the composer it already brought in this script then I'm just going to again just for for for doubling check add into the context window fo utils move all the methods defined in at foore agency year to foore utils and invoke them properly here so expected Behavior would be it's going to delete red lines are going to show up from 93 to 108 and then we'll be able to check and again this is why being able to here it is it's drafting on these two subtabs and then let's see how it goes so whoa so but it can go too far so it it it may for I'm not going to accept this edit this time just because I know is already working this looks like it might have gone too far but if it's a um what what it usually does or what you can get it to prompt to do is just pull methods that are defined with defa pull them into utils like what it would manually look like would be copying in contrl X cutting out defa putting that to Foya utils and then ensuring that the um Foya agency Year from Foy utils is pulling in Fetch and save annual reports so it'll still work okay so what what is this output clear the terminal we're still in cognitive sovereignty I'm just just going to trash that terminal right click open an integrated terminal Python 3 let's just do main okay so main we did an update but again this is what it looks like to to debug just put it into the composer fix it meanwhile let's call the the fo agency here accept it again looking is probably a good thing to do it's like it's not just like not looking before crossing the street it's like not looking when making stochastic edits to your PhD dissertation which is Live code but s okay there we go so even without intervention fo agency year Okay so what it's doing is it maybe we're getting rate limited I'm not sure um for each of those departments it's saving these outputs so we'll keep watching what's happening live I'm not sure maybe this is going to be about to be a huge one but first it checks if we already have that exact combination of agency and year then I concatenate in the file name this is just one way to do it it could be done like way better ways um the date that it was pulled that's 2024 820 um I'm not sure if that last piece the time but then the middle piece here is like 19 characters because for this one like 2,000 DOI let's just look at a let's look at a um let's look at the USDA okay so 2005 it's 19 characters long you're going to see a lot of 19s because 19 just says report not found so if you request what what was the annual report for the USDA in like the year 3400 probably it's not found on that server not saying it's not there but then we can see okay here's 2010 annual report okay interesting but we got it so this is their Foya metadata as far as I totally understand this is all open information I am not doing anything other than just calling the Foya API so we can see how many characters are there and then it's like 2024 and 2025 are back to 19 characters because those reports are not there um not not sure like it'll be interesting to see what what comes out here okay but I'm just going to kill it clear and then let's call Foya to mark down so here it's going to make a Foya markdown folder so it's just iterating over all the reports it's giving a lot of Errors maybe we could debug it but we'll see let's go to doe so here's the 19 character one report not found but here's the 43 okay now this is looking a little bit more readable let's make a new script called Foya secondary MD processing. py it's already in the context window I'll add into the window a markdown that we know has a lot of characters so we'll do doe 2008 let let's try without specific reference to a file it would work with reference to a specific file but just make sure that it doesn't overfit there let's say given markdown documents in do slash that means this folder Foya underscore markdown slash folder and all sub folders right secondary processing algorithm that reads in and improves formatting and conciseness saving all outputs to a folder Dot slash Foya secondary markdowns slash open parentheses make it if it is not there recapitulating Boulder nested topology thank you I'm curious to see because it's not going to do an llm call but if you'll recall back to INF for ant stream one and the kinds of llm API augmentations that were possible then we could imagine okay now inray over all these reports and do llm summary or do translation or explain it to this person okay let's just see how it goes all right clear we're in the Foya folder here's secondary MD processing Python 3 Foya tab it goes to the point where it's ambiguous and then secondary MD processing okay no module bs4 some people might know ways to fix this but let's just see what it recommends okay it adds some I'll just accept it clear run it again error beautiful soup for not installed installing it now so this is what's so fun and collaborative is like oh hm okay I came across that friction and then just within a few seconds okay but now no one else will hit that exact friction okay interesting let's look at what it's doing whoa okay this is processing from ones that are that are like just kind of empty in so we'll see what those maybe those have a different format but it it'll get through them okay it just looks like it's spacing it out but you know what's wrong with that and then let's see when it goes through the subfolders or what happens then okay it's almost done with the ones that were just in the folder itself meanwhile um this is like the last section that I had prepared to go through so please write any comments or questions or ideas in the live chat and then we can play around a little bit and and do a little more developments okay here we go OIP okay okay okay not okay OIP might be an exception okay let's see another one HUD okay so 19 okay this is the report not found and here's okay okay okay you know is this helpful possibly would uh llm being used in this Loop be helpful yeah probably okay um just pull this off screen for a Split Second but api. data.gov I mean this is what USA OS is like when we think about what what what is USA OS well interestingly I'm getting some very strange internet patterns from the other window which I'm not going to show but let's just end that one and see if I can pull up Usos wow very interesting here I've just navigated over here but here's from my person page drawing from Kirby earner Usos but it's like has it ever been more API oriented to interface with speak program utilize the USA operating system not sure okay clear it close the terminal I'm going to delete the um markdowns because those can be regenerated but I'll leave the responses that already came in just because those are information it just kind of like a it's an API call that anyone could have made I'm just listing them there so that was the foyer okay all right all right okay let Let's uh recap there was a couple sections here going from the end to the first most recently we looked at this Freedom of Information Act API call scraping processing handling pathway and and explored with the git ignore how you can put your own personal API key into EnV you need an email address to sign up and then that's a way where like many people can collaborate on the open source tooling while also keeping their API secret that's the Foya then we looked at in in folder nine under other and then we looked at two different um well I guess three folders within zero context systems now here going in in forward chronological order we looked at William Blake's work entity extraction some processing and some Snippets from Blake for for augmented Blake frints looked at cognitive sovereignty skipping to the third one of the first three talked about how this meta recipe for bringing in a resource folder asking it to write a technical spec or a perspectus and then writing software that's very well structured and articulated for further development with utilities and Mains and configs and and how that resulted in some pretty interesting outputs like just about looking about TR transition matrices and setting us up to integrate with pmdp which which we very well could do if someone mentions it in the live chat in the coming minutes and then lastly in the active inference system section the pmdp pull method and I'll leave the P methods up let's just intra stream3 push it and then let's read pmdp method in in its natural context that was 1 hour ago reload the page reload the page now it says now zero context systems active inference PDP methods this is like getting into oh wow this is like kind of nicely formatted this is like something you could take on a nice trip okay Andrew P is writing a few things in the chat I'll I'll wait a few seconds while you type out some more ideas anyone else though again please write any ideas and for a a couple of minutes here let's just chill see see what else we can explore and learn and do actually actually while while people are writing I'm just going to do a quick overview on on what is in these different folders so starting in zero computer languages this is a a language name brain this is a brain implementation of active inference famously an obscure Arcane bizarre coding language but why not right it's all just semantics then we have brain active inference goang thing agent definition Java active INF forance Pearl Julia in Julia it's not done yet but kobis e has done incredible work on visualization and many many other things and so I was working to get a script working that would render the kinds of images that he's doing and do a bunch of other stuff but that's just in progress rust and then like hilarious stuff like active shelfer I mean this is a shell script that does active inference this is really highlight the semantics and the syntax and the space between and and the kinds of poll jumping that we can do back and forth specs and prompts some early documents meta informats um bio informat systems folder we have active inference C of sovereignty ic2 S2 and William Blake we went into today p3f and some of the bolts business legal operating technical social these were explored in some other streams about legal engineering and the three RS and all that so that's the zero context folder that's setting context here's in prepare this is a fun folder it has a ton of it has config with all these configurations for an ant active inference multi-agent simulation then there's meta config that configs the config and then there's Meta Meta config that configures the meta config we have cognitive security cryptography digital twin design processing digital twin metaphysics metaphysics spec generator this is the speculative realism coding at play nested systems systems within systems invoking the category Theory networking phermones the fairmon ontology Quantum ferone environment and then a little bit of culinary delight with the salt fat acid heat PDP methods this is where there's a variety of methods that are developed with llms and research methods learning education also please contribute to everything and then things here's different things including a generic generic generic generic logged constructed thing so context again is just sort of like a bunch of different things that contextualize for us and for Shirley cursor one is preparing with configs and the things definition and the methods definition then two goes into operate here is planning rendering a plan executing the rendered plan of a simulation and having situational Anta awareness along the way that's the actual operativity of the simulation then we have measurements measuring the simulation four reporting on the measurement of the simulation five following up and specifying and executing the followup on the reporting of the simulation six is an API for meta and format for knowledge I don't have too much in here seven and eight are not there and then nine is this meta pattern where we clone in the GitHub repos or the GitHub users for a given domain like the brain these the brain API and then bring them in reindex cursor then program and then we can delete the original repos so that that's a fun way for if there's like something that people want to integrate there's a few multi-agent llm techniques and like AGI related things that would be pretty interesting maybe for a feature one so that's the active infan package okay thank you Andrew I'm going to copy what you wrote in okay let's go back to zero systems 3.1 okay let's just do 3.2 MD as if there was the do two okay Andrew wrote quick thought on active pmdp cursor AI integration flow one build out work scripts plus add to repo EG example social sciences two cursor reads working script repo to Aid in building recreating new simulation use cursor's help as much as possible to finish the simulation do manually what it can cannot it's Horizon three rinse and repeat we hit the limits of the currently existing llm llms along the way but we build the repo and available acadm simulations resources as we go while improving the repo's ability to provide cursor with useful information for improving next script building iteration I believe this is what you're proposing just exercising my own understanding of it here smiley face okay thank you Andrew I'm going delete that last one now let us do this contrl a contrl k operationalize this into a comprehensive development plan for what I will immediately do after after your response comma llm I don't know if it's been explored whether they're saying things like thank you or speaking to it a certain way help awesome okay okay okay make a new folder called um augmented active inference okay let's just try this here we're in 3.2 MD so we just took a few super chats from Andrew and and spec it out okay so create a new GitHub repo doesn't need to be a GitHub repo build working scripts cursor AI integration documentation and testing iteration Improvement next steps continuous integration okay control I uh contr a control I wasn't necessary it's just bring it's like the whole file and lines 1 through 62 but that's the whole thing but it's just it's a habit what can I say do all of this making all the files needed saving the new files as created in do slash augmented active infant okay let's see certainly okay it it looks like it's doing that in the top level repo of the [Music] um whole INF for ants but we'll we'll bring this in and we'll just replace the this folder that we made okay Dragon here we go okay re re reset reset this is just because I I I rug pulled where it had written it and and moved it okay here we go okay script overview social science sim. py implements a basic social science simulation using PDP okay save it close it social science okay from pmdp import agent inference learning social agents okay I'm going to run pmdp poll just so that we have the actual pmdp repo actually let let's see if we don't need that first okay we're in the augmented okay social agent run simulation okay utils.py process visualize calculate tests cool unit testing all right open it with integrated terminal so we're all the way deep we're we're deep into this cursor augmented situation Python 3 social science Sim okay nothing happened here control I add extensive logging here and in the whole just here so we can have better understanding and achieve in this folder the aims of 3.2 okay certainly I'll enhance the logging in the social science sim. py script to provide a more comprehensive oh okay okay look good now add the utils into the context probably not necessary probably not necessary but move all methods to at utils.py and invoke them here that's what I was trying to do earlier so let's just see what it does now so it deleted these definitional statements and then we see it added them into utils save it close the utils so read me for this repo all right let's let's just quickly let's just push it augmentation push then let's read the read me in its not natural habitat okay augmented active inference read me oh interesting okay it was empty because it wasn't saved in its place reload the page here it is okay active cursor integration integration of active inference principles with cursor AI for social science simulations okay no clear it up we're in social science Sim make all needed improvements to achieve the aims of read me move all method definitions to at utils.py and invoke them here let see it's doing this this is a I I I believe this will be fixed in the future version but sometimes it'll be like going all the way back up the repo there there might be a way to to to do this just better with how the paths are handled let's just see what happens when we run it first okay cannot import name agent from pmdp fix this but we know that it has access to PDP methods. markdown so this is the one that's like the study guide for what PDP does now for a human human reading this document as mentioned earlier it's probably great for trains long car rides you know dark room rooms all these kinds of places where you might want to read something just really pay attention to it but it's the perfect high density semantics that will be helpful here let's just accept whatever it did see if it did better and then if not we'll give it a little help no module name p dp. aent it's a new error fix this so let's just keep on finding and quashing some bugs and let's just see if like can we get to a PDP with we haven't brought in the pmdp repo but it will work if we pull if we clone in the repo then we can explicitly invoke the functions P DP has no attribute agent okay so we we we could be going around circles or not I apologize for the confusion it's like no no I wasn't confused you don't need to apologize I think that this this composer functionality again super cool and there's also probably ways to use it a lot better because it has a whole another view layover that that I'm I'm not really even exploring at this time okay can not import util so we're so when when it's one kind of line of flight and just like quashing bugs that seem to be of a similar ilk I'll keep it rolling in the same composer but then when it's a different Vector we're going to do a pivot then we can do a new one okay no module PP distributions so it's kind of fixing a series of Errors related to ACC accurately calling PDP subm modules this could be like super pmdp file structure specific but nonetheless that's where we are okay okay okay this version implements a simplified version of simple agent using only numpy we've replaced the pmtp specific operations with basic numpy let's see what it looks like wow like so then it's like then then who was semantics if it takes the PDP PDP semantics you know was it all what okay okay okay got some plotting mat lib plot errors but I could see from the top okay that it that it was doing stuff so in social science sim. py um save all terminal logs to a file log.txt save all output files SLV visualizations to a folder in this folder output slash make the folder if not there Claude 3.5 Sonic doing it today okay accept it save it clear it clear a terminal double up run it okay got an unexpected argument fix it here we go we have agent one and Agent Zero receiving observations updating beliefs taking actions amazing see here it just put that over here so let's look at this one this is in the correct location this one is 100 lines long this one is like it's seven lines long just Implement that one little stub but then it did it in the wrong place I I don't know if that's I'm just using it weirdly or if if it's just getting confused because we're really deep in this nested repo if you just do kind of like one project per repo like William Blake repo cognitive sovereignty repo then the embedding IS F faster there's less context but that's kind of the Delight also is all all this mixed interactive semantics okay clear run it again we're going to get the probably same error oh well but where did it save the logs to ensure all terminal outputs are saved in this folder to log.txt then we'll move all the methods also just for for context here's the system prompt that I give cursor use professional functional modular concise elegant interpretable python use comprehensive logging to terminal and all other programming best practices I'm going to delete that part because maybe it's not it's overlearning on that accept save it clear it clear it run it okay now we got to this this eror again fix this okay we'll we'll we'll progress a little bit further on this bring in a few pmdp methods till then though if anyone wants to uh see it went again now it's editing social science Sim Utilities in the outer folder so it's like why but if anyone writes a live chat with like a thought or a question we can definitely do it okay also again we know that we'd be able to bring in the full clone in pmdp and then just explicitly reference it and that's like that's not even a bad strategy but let's see if we can do it without cloning in the repo so move all methods to at fills. py and invoke properly here okay okay accept it save it I'm going to copy in just another message that Andrew wrote and read it here uh FYI with appreciation to the work being done by both the SPM and Pi Pi DMP mdp which is heavily based on SPM I can confirm via hours of repo cross referencing there's no easy route from either of these you can't get there from here packages and their dependencies to an easy ready too simulation Builder already simulating two agents even before inscript inspecting the script logic awesome big feet thank you awesome Andrew cool okay but another way we could do this would be oh simulation results okay there's three agents they're taking actions over time just by calling this okay now let's see what happens let's just reindex cursor make sure that we're in the right spot so here it's it's all all the files that we touched it's it needs to reindex it might do a little mini re indexing when you call something into local context but but I don't know okay bring it into the composer Now update this update and extend these methods invoking where possible at pmdp methods so that's the one that we've been looking at and enjoying which is it's like the doc strings and the input output for all these pmdp functions okay let's see how it does it's it it drafts it up here so here's like where the generation is happening and then then once it finishes this V1 draft then it runs through okay and it goes through again second pass it's kind of like measure twice cut once situation okay save it clear a composer social agents here we see ABC it's like Q qpi is actually doing the EXP Ed free energy based model updating for A and B okay now over here comprehensively develop I'm using the control K version here just for a little little flavor um using the at utils.py to achieve the mission of double 3.2 maybe there's a way to do in the system prompt like just say um and this is also where like programming practice and expertise and all this comes into play like maybe maybe there's a way to make sure like that we always always call The Run script Main and then we always call the utils like utils underscore and then the type of utils then we could have a system prompt that's like I only like to run scripts called main myself and please ensure that utils uncore asterisk are comprehensive and you know make it so that Carl friston would smile upon it clear social science Sim okay can't Port name control new errors fix it script overview meanwhile while the control I is going control K develop this given all we know now except whatever it says clear run it again reset that one's done accept it pop back to social science Sim can't import inference new one fix it meanwhile back to 3.2 develop this given what we know now okay see here now utils again is going to the wrong place we'll get it there let's just see what it does okay okay okay oh create contribution guid lines for potential collaborator set up a project Wiki for detailed documentation tutorial consider presenting the project at relevant conferences or meetups like the fourth applied active inference Symposium from November 13th to 15th 2024 possibly let's just say develop section n comprehensively comma absurdly comma professionally then we'll pop back to the simulator okay okay okay okay all right it's all about nine now wow okay talk about cart before the horse it's like why why not just focus on Section n aren't you interested in like subsections reject it it's okay we know it would okay okay okay Andrew wrote typically in fer Paul season sample action functions are called separately albeit often adjacently as PP the llm seem to realize it could combine them into a single function flow okay let say now given at so and then Andre wrot subject to change of course point is fascinating to see how the llm might make optimizations not inherent to the original libraries I mean yes that's that's very characteristically understated yes it it suggests stuff that's like it's an adjacency in like Dimension 754 but for a given person it's like it might pop up to your awareness in a moment it might not but even if what popped up in your aw Wess were like awesome Epic professional modular absurd great every single second or you're doing it 10 times a second it's like you still might never just riff enough let alone capture and do that kind of cosmic fishing um explain this comprehensively okay so now wall contr L is going reset it let's add in the utils run it but we know it's going to give an error add it to the composer fix this with reference SL modification only to the local folder okay combining invert policy sample action functions to a single function or flow can streamline the simulation process clear it run it no module pmdp alos fix this it's making a lot of changes so it's like again there's there's so many ways to do the professional programming this is just one sort of pythonic strategy okay now it's bringing in p mdp these units save it clear it double up run can't import name inference fix it also it's like we could have just add in oh it's it can't import inference maybe inference doesn't even exist that's that's those are a few of the situations see now it might just be kind of floundering right here let's see no module pdp.com DP and just see what they are but but this also relate this is getting like pretty specific into pdp's folder and subm module structure yeah yeah just maybe uh 10 to 30 more minutes but if people have comments or questions please just go for it okay so there it's just saying you know what ignore that core mention run it okay cannot import inference delete it cannot import control we let's just accept importing pmdp period fix this however yeah okay Andrew wrote inference alos Etc do exist but the dependency structure is highly complex yeah okay I I okay okay okay let's let's do a little let's do some radical pmdp surgery here okay CD double dot pop up a level LS that's what's there CD double dot pop up a level LS there's better ways to do this I'm just showing one way to do it CD active inference now we're in active inference not the augmented one okay reload our llms get them ready okay Python 3 PDP pull clone in pmdp okay okay here we go new script this is going to be called Flat pmdp uncore flatten py okay here given all the functions in pmdp package iterate over the entire python package oh write a script that will it over the entire entire python package pulling out all python method slash entity definitions EG across and through modules sub folders Etc and output a mega I won't use that output a Tex text file pmdp methods flat. py which let's do PDP utils oh PDP all utils which contains verbatim all pmdp methods for the calling okay so we're going to generate the the script here that's going to flatten pmdp okay it again it it pulled it up here copy it P to be flatten paste it in okay okay like if if this works on one shot okay there's PDP flatten Python 3 pmdp uncore flatten okay what do you think extract definitions as walk process package main all right okay okay it little bit of weirdness just because of um IO operations on closed file that could be just due to like something weird about how I opened the okay extracted 24 definitions all right all right looking good ensure that this script iterates through all folders and sub folders within do SL pmdp now it let's just see OS walk accept it save it clear it double up run it 24 definitions still I am only getting 24 definitions there should be hundreds no this e even if we get to hundreds it won't be the right output right because like there's going to be a method defined in utils and I expect there'll be a similar one in slj SL utils okay clear double up run it okay okay look in this very folder comma my colleague there are subfolders in what was cloned by P DP pull that output there is the whole pmdp script that's what we need the whole team to look through so we can get all hundreds of methods to make a flattened single Mega utils file for simpler referencing remember we're just nmes the script is looking at the installed PDP package instead of locally cloned repo there we go but why didn't you just say so now there we go 456 to all utils okay now I'm going to pull this back into the scripts well done cursor take a quick breather okay clear CD double dot pull up CD augmented enter LS CD scripts LS go over to cursor double check it's all reindexed delete the original PDP there it is new files we'll just make sure it gets them all 400 456 definitions says Andrew incroyable that's like exactly how I feel it's like what what OAB just incroyable day okay social science Sim add in this context window pmvp all utils develop this multi-agent social simulation given all methods fully defined in pmdp Corall utils.py in this folder okay meanwhile well let's let let's Let It edit then then we'll okay okay it's kind of writing it in the composer window again this is this might just be a tiny cursor bug it'll be like there it is there's my answer but it's like well no let's or so it doesn't suggest a code edit so I say suggest all those code edits to social science Sim it's like oh I'm sorry yep pretty cool okay now this is where it's doing the composer mode correctly it opens up a second tab then it writes all those code edits there and then it'll rescan this one and say well this was my updated draft and this was the original draft so now pulls in let's see how this does fix this remove the need to ask about version if that is simpler okay utils.py it's cuz it's calling both the utils and well let's just rename this one utils yeah rename this utils well first let's just delete the ones that we had we'll do we'll if we call it utils old it might get confused okay utils.py then social science Sim utils import Star okay fix this removing the need for the method or invoking it or writing it if it is missing but then here here's the deal utils.py which is the flattened all it's it's 20,000 lines long so then it'll have a hard time reaching in and making the targeted edit to Something in here see it's it might just be like oh we don't need that one let's see it might just be like let's delete 19.9 out of the 20,000 lines okay a file too long see edit command is limited to files at most around 400 lines long so then it just cancels it so I I I I I get that I get that all imdp utils social science Sim from all PDP utils save it write this so that it only uses functions defined in at all pmdp dets it Imports everything which is perfect perfect don't change that use the pmdp methods to make this multi-agent simulation that initializes simulates and visualizes a social multi-agent setting we'll do a few more minutes if anyone has like comments or questions let's see them also again it's defining methods here so let see what it does social agent now uses agent from pmdp along with random a b Etc okay okay remove the need for unit test not sure what that is we can like look that's the unit testing methods I understand see but like do you like philosophically do you let's just ask it not that what it says will be an answer philosophically would you say that you fully understand this script and all it implies it's kind of a trick question because it's like all it implies okay accept it clear it double run it okay let's try it here's what it says did you mean okay yes I did mean Python 3 okay so okay well there's the answer for whether it thinks it understands it but that's like that's like something for people to consider like this is why I leave the same composer window running really make sure that social science Sim does not need any unit test stuff at all okay but meanwhile new side chat just dropped write a hilarious age appropriate esoteric lore Laden who's on first style dialogue for fully explaining allegorically to someone familiar with reinforcement learning everything happening in this active inference multi- agent simulation andure many baseball history historical references comma as well okay update this so that it runs with just Python 3 social science sim. py no commandline arguments I think I accidentally terminated the uh let's do Sonet I think it does sometimes funnier who's on first dialogue okay we have two two sonets working for us here got the the baseball dialogue slow position 12 okay okay added the command line arguments now we can call it the way we want accept it save it reset it clear it double up run it what did I say son it ensure that unit test is not required at all I never this is something I've never said before I never want to see that bug again meanwhile who's on first MD okay okay okay oh let's not get ahead of oursel save it clear it double up fix it and remember what I said last time we'll see if we can do like couple more see if we fix it and then otherwise we'll close with um reading the who's on first summary and then at the end of that I will read any comments that people have or questions that they have asked in the meanwhile and that will conclude INF for an stream 3 no no you don't have to apologize I just said remember what I said all let's just see if cursor has self-awareness fix this in a way where you cursor don't give me that error okay let's see how that goes okay control shift L Andrew wrote restructuring a library that's taken years of development in various programmers to develop not to mention everything contributed to its SPN precursor can it be done in a few settings and I'll say that's what my oh see file to long to avoid cursor I'll make a more so we we'll leave it there um we'll we'll we'll push the update so updates not all fully working the S Antics are basically there though for any and all to build upon and help through okay we'll push that structure this for professional markdown viewing that's what my friend Andrew said prepare a total response to him that is respectful and age appropriate okay we're going to read the response to Andrew then we're going to push Andrew I appreciate your perspective on this you're absolutely right that restructuring a library with years of development history and contributions for multiple programmers is significant undertaking it's not something to be taken lightly or rush through dot dot dot dot dot dot dot dot dot what are your thoughts this is kind of like hold on there partner slow down restructure pmdp by flattening it and squeezing it okay close it save it close it we did what we did save it close it clear it close the terminal clear it again close it goodbye cursor for a day who is on first question mark interobang then we'll read it there and then I'll look at any live chats augmented docks okay here we go it it always does the 27 Yankees okay hey Costello have you heard about this new active inference multi-agent simulation it's like the 1927 Yankees of AI the 1927 Yankees you mean with Babe Ruth and L garig no no no I'm talking about social agent and its teammates they're like the murderer's row of artificial intelligence wait who's on first in this simulation no who's not in this simulation we got social agent on first observation at second and action on third okay so who's social agent exactly social agents on first just like our old pal who I'm asking you who's social agent no no social agent is like Babe Ruth he's the heavy hitter of the simulation he's got a random a matrix and B Matrix just like the Bambino had his legendary bat and glove so social agent has a bat and glove no he's got beliefs and policies the a matrix is his belief about how observations relate to Hidden States like how the babe could read a picture the B Matrix is his belief about how actions change the world like how Ruth knew just where to swing to hit it out of the park all right what about about second base you said observations there that's right observation is like Earl combes the Yankee center fielder always watching Always observing in the simulation observation feeds information to social agent just like coms fed balls to his teammates and actions on third you've got it action is like Tony lazeri the Yanke clutch hitter when social agent needs to make a move action steps up to the plate so how do they play together well it's like a perfectly executed Double Play No Triple Play social agent uses his A and B matrices to infer the best action just like Ruth sizing up a pitch then action takes that inference and makes a move like lazeri turning a double play meanwhile observation is constantly updating the game State like Combs tracking fly balls in the Outfield but what's the goal of this game huh that's where it gets interesting the goal is to maximize expected free energy which is like trying to win the World Series of cognition it's all about minimizing surprise and uncertainty just like how the 27 Yankees minimize their opponent's chances of winning so they're trying to predict what's going to happen exactly it's like they're playing interdimensional chess while everyone else is playing checkers they're not just reacting to the environment they're actively trying to shape it just like how Babe Ruth called his shots this is making my head spin more than a Dizzy Dean curveball okay that's hilarious don't worry Castello just remember in this game every agent is trying to be the Babe Ruth of their own cognitive World Series they're not just learning from rewards like in Old School reinforcement learning they're actively inferring the best way to play the game of life I think I need to go sit in the bullpen and think about this for a while that's the spirit just like how active inference agents are always updating their models you're updating your understanding you'll be a cognitive Hall of Famer in no time conclusion this allegorical explanation aims to provide an intuitive understanding of the active inference multi-agent simulation by drawing parallels with baseball Concepts and the legendary 1927 New York Yankees team it highlights key components such as the social agent observation action as well as Core Concepts like belief updating and free energy minimization all right thanks everyone for watching that was uh super fun hopefully you enjoyed some of these methods and demonstrations it's all happening at the Active inference Institute slactive infer an repo everything we looked at is open- sourced and pushed it would be awesome for anyone to use play extend further come participate have fun all right thanks bye